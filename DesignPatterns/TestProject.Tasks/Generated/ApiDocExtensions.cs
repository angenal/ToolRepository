// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace UserServiceClient
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for ApiDoc.
    /// </summary>
    public static partial class ApiDocExtensions
    {
            /// <summary>
            /// 参数使用说明
            /// </summary>
            /// <remarks>
            /// 参数使用说明
            /// 假设传送的参数如下：
            /// A：	wxd930ea5d5a258f4f
            /// B：	10000100
            /// C：	1000
            /// F:   {a:123,b:"sdjj",c:{p:"th"}}
            /// 访问时A、B、C要放到QueryString中，F要放到Body中（F为对象参数、数组参数等非值类型参数，这种参数每个接口最多只能有一个，在调用这种包含这种类型的参数接口时Content-Type要指定为application/json）
            /// 参数中不要包含枚举类型
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ParamsDescription(this IApiDoc operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IApiDoc)s).ParamsDescriptionAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 参数使用说明
            /// </summary>
            /// <remarks>
            /// 参数使用说明
            /// 假设传送的参数如下：
            /// A：	wxd930ea5d5a258f4f
            /// B：	10000100
            /// C：	1000
            /// F:   {a:123,b:"sdjj",c:{p:"th"}}
            /// 访问时A、B、C要放到QueryString中，F要放到Body中（F为对象参数、数组参数等非值类型参数，这种参数每个接口最多只能有一个，在调用这种包含这种类型的参数接口时Content-Type要指定为application/json）
            /// 参数中不要包含枚举类型
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ParamsDescriptionAsync(this IApiDoc operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ParamsDescriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// 执行结果状态码说明
            /// </summary>
            /// <remarks>
            /// 执行结果状态码(ResponseEntity.Code)说明:
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void CodeDescription(this IApiDoc operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IApiDoc)s).CodeDescriptionAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 执行结果状态码说明
            /// </summary>
            /// <remarks>
            /// 执行结果状态码(ResponseEntity.Code)说明:
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task CodeDescriptionAsync(this IApiDoc operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.CodeDescriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// 执行结果状态码说明
            /// </summary>
            /// <remarks>
            /// 执行结果状态码(ResponseEntity.BussCode)说明:
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void BussCodeDescription(this IApiDoc operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IApiDoc)s).BussCodeDescriptionAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 执行结果状态码说明
            /// </summary>
            /// <remarks>
            /// 执行结果状态码(ResponseEntity.BussCode)说明:
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BussCodeDescriptionAsync(this IApiDoc operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BussCodeDescriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// 签名生成方法说明
            /// </summary>
            /// <remarks>
            /// 签名生成方法说明
            /// 假设传送的参数如下：
            /// A：	wxd930ea5d5a258f4f
            /// B：	10000100
            /// C：	1000
            /// D：	test
            /// E：	ibuaiVcKdpRxkhJA
            /// F:   {a:123,b:"sdjj",c:{p:"th"}}
            /// 第一步：对参数按照key=value的格式，并按照参数名ASCII字典序排序,如下：
            /// stringA  :
            /// A=wxd930ea5d5a258f4f&amp;amp;B=10000100&amp;amp;C=1000&amp;amp;D=test&amp;amp;E=ibuaiVcKdpRxkhJA&amp;amp;F={a:123,b:"sdjj",c:{p:"th"}}
            /// 第二步：拼接API密钥：
            /// stringSignTemp :
            /// A=wxd930ea5d5a258f4f&amp;amp;B=10000100&amp;amp;C=1000&amp;amp;D=test&amp;amp;E=ibuaiVcKdpRxkhJA&amp;amp;F={a:123,b:"sdjj",c:{p:"th"}}&amp;amp;key=192006250b4c09247ec02edce69f6a2d
            /// 第三步：生成sign：
            /// sign : MD5(stringSignTemp).toLowerCase()
            /// 备注：上方提到的F字段为对象，在拼接key=value值时，F中的字段要按升序排序，F中的嵌套对象也遵循该规则。
            /// 如果url参数中的字符串使用了urlencode，那么生成sign用到的值为urlencode之前的值。
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void SignDescription(this IApiDoc operations)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IApiDoc)s).SignDescriptionAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 签名生成方法说明
            /// </summary>
            /// <remarks>
            /// 签名生成方法说明
            /// 假设传送的参数如下：
            /// A：	wxd930ea5d5a258f4f
            /// B：	10000100
            /// C：	1000
            /// D：	test
            /// E：	ibuaiVcKdpRxkhJA
            /// F:   {a:123,b:"sdjj",c:{p:"th"}}
            /// 第一步：对参数按照key=value的格式，并按照参数名ASCII字典序排序,如下：
            /// stringA  :
            /// A=wxd930ea5d5a258f4f&amp;amp;B=10000100&amp;amp;C=1000&amp;amp;D=test&amp;amp;E=ibuaiVcKdpRxkhJA&amp;amp;F={a:123,b:"sdjj",c:{p:"th"}}
            /// 第二步：拼接API密钥：
            /// stringSignTemp :
            /// A=wxd930ea5d5a258f4f&amp;amp;B=10000100&amp;amp;C=1000&amp;amp;D=test&amp;amp;E=ibuaiVcKdpRxkhJA&amp;amp;F={a:123,b:"sdjj",c:{p:"th"}}&amp;amp;key=192006250b4c09247ec02edce69f6a2d
            /// 第三步：生成sign：
            /// sign : MD5(stringSignTemp).toLowerCase()
            /// 备注：上方提到的F字段为对象，在拼接key=value值时，F中的字段要按升序排序，F中的嵌套对象也遵循该规则。
            /// 如果url参数中的字符串使用了urlencode，那么生成sign用到的值为urlencode之前的值。
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task SignDescriptionAsync(this IApiDoc operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.SignDescriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// 签名生成校验
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            /// <param name='a'>
            /// 参数A
            /// </param>
            /// <param name='b'>
            /// 参数B
            /// </param>
            /// <param name='c'>
            /// 参数C
            /// </param>
            /// <param name='d'>
            /// 参数D
            /// </param>
            /// <param name='e'>
            /// 参数E
            /// </param>
            /// <param name='f'>
            /// 参数F
            /// </param>
            public static ResponseEntityEDemo SignTest(this IApiDoc operations, string sign, string a, int b, int c, string d, string e, EDemo f)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApiDoc)s).SignTestAsync(sign, a, b, c, d, e, f), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 签名生成校验
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            /// <param name='a'>
            /// 参数A
            /// </param>
            /// <param name='b'>
            /// 参数B
            /// </param>
            /// <param name='c'>
            /// 参数C
            /// </param>
            /// <param name='d'>
            /// 参数D
            /// </param>
            /// <param name='e'>
            /// 参数E
            /// </param>
            /// <param name='f'>
            /// 参数F
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityEDemo> SignTestAsync(this IApiDoc operations, string sign, string a, int b, int c, string d, string e, EDemo f, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SignTestWithHttpMessagesAsync(sign, a, b, c, d, e, f, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string SignTestPost(this IApiDoc operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApiDoc)s).SignTestPostAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> SignTestPostAsync(this IApiDoc operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.SignTestPostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetResponseCodeDescription(this IApiDoc operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApiDoc)s).GetResponseCodeDescriptionAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> GetResponseCodeDescriptionAsync(this IApiDoc operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetResponseCodeDescriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string GetResponseBussCodeDescription(this IApiDoc operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IApiDoc)s).GetResponseBussCodeDescriptionAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> GetResponseBussCodeDescriptionAsync(this IApiDoc operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetResponseBussCodeDescriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
