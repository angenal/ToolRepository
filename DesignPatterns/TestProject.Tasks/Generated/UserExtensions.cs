// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace UserServiceClient
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for User.
    /// </summary>
    public static partial class UserExtensions
    {
            /// <summary>
            /// 用户登录，返回用户基本信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// 用户名
            /// </param>
            /// <param name='passWord'>
            /// 加密后密码
            /// </param>
            /// <param name='ip'>
            /// 客户端IP地址
            /// </param>
            /// <param name='agent'>
            /// 客户端UserAgent
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            public static ResponseEntityUserEntity Login(this IUser operations, string userName, string passWord, string ip, string agent, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUser)s).LoginAsync(userName, passWord, ip, agent, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 用户登录，返回用户基本信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// 用户名
            /// </param>
            /// <param name='passWord'>
            /// 加密后密码
            /// </param>
            /// <param name='ip'>
            /// 客户端IP地址
            /// </param>
            /// <param name='agent'>
            /// 客户端UserAgent
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityUserEntity> LoginAsync(this IUser operations, string userName, string passWord, string ip, string agent, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.LoginWithHttpMessagesAsync(userName, passWord, ip, agent, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='oldPassWord'>
            /// </param>
            /// <param name='newPassWord'>
            /// </param>
            /// <param name='sign'>
            /// </param>
            public static ResponseEntityBoolean ModifyPassword(this IUser operations, int userId, string oldPassWord, string newPassWord, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUser)s).ModifyPasswordAsync(userId, oldPassWord, newPassWord, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='oldPassWord'>
            /// </param>
            /// <param name='newPassWord'>
            /// </param>
            /// <param name='sign'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityBoolean> ModifyPasswordAsync(this IUser operations, int userId, string oldPassWord, string newPassWord, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ModifyPasswordWithHttpMessagesAsync(userId, oldPassWord, newPassWord, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
