// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace UserServiceClient
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for StudentOperations.
    /// </summary>
    public static partial class StudentOperationsExtensions
    {
            /// <summary>
            /// 查询学生是否是结构化的用户
            /// 只要账号存在于用户管理后台，则认为是结构化的，否则为非结构化的
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentId'>
            /// 学生Id
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            public static ResponseEntityBoolean GetSFlag(this IStudentOperations operations, int studentId, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IStudentOperations)s).GetSFlagAsync(studentId, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 查询学生是否是结构化的用户
            /// 只要账号存在于用户管理后台，则认为是结构化的，否则为非结构化的
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentId'>
            /// 学生Id
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityBoolean> GetSFlagAsync(this IStudentOperations operations, int studentId, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSFlagWithHttpMessagesAsync(studentId, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 获取学生信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentId'>
            /// 学生Id
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            public static ResponseEntityStudent GetStudentInfo(this IStudentOperations operations, int studentId, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IStudentOperations)s).GetStudentInfoAsync(studentId, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 获取学生信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentId'>
            /// 学生Id
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityStudent> GetStudentInfoAsync(this IStudentOperations operations, int studentId, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetStudentInfoWithHttpMessagesAsync(studentId, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 根据班级ID获取所有学生列表
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='classId'>
            /// 班级Id
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            public static PageResponseEntityListTStudent GetAllStudentByClassId(this IStudentOperations operations, int classId, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IStudentOperations)s).GetAllStudentByClassIdAsync(classId, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 根据班级ID获取所有学生列表
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='classId'>
            /// 班级Id
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PageResponseEntityListTStudent> GetAllStudentByClassIdAsync(this IStudentOperations operations, int classId, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAllStudentByClassIdWithHttpMessagesAsync(classId, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentId'>
            /// </param>
            /// <param name='phone'>
            /// </param>
            /// <param name='sign'>
            /// </param>
            public static ResponseEntityBoolean UpdateStudentPhone(this IStudentOperations operations, int studentId, string phone, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IStudentOperations)s).UpdateStudentPhoneAsync(studentId, phone, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentId'>
            /// </param>
            /// <param name='phone'>
            /// </param>
            /// <param name='sign'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityBoolean> UpdateStudentPhoneAsync(this IStudentOperations operations, int studentId, string phone, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateStudentPhoneWithHttpMessagesAsync(studentId, phone, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
