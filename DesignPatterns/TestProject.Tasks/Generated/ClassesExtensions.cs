// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace UserServiceClient
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for Classes.
    /// </summary>
    public static partial class ClassesExtensions
    {
            /// <summary>
            /// 根据学校获取学校列表班级
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// 学校ID
            /// </param>
            /// <param name='sign'>
            /// 签名
            /// </param>
            public static ResponseEntityListApiClassInfo GetClassListBySchoolId(this IClasses operations, int schoolId, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IClasses)s).GetClassListBySchoolIdAsync(schoolId, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 根据学校获取学校列表班级
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// 学校ID
            /// </param>
            /// <param name='sign'>
            /// 签名
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityListApiClassInfo> GetClassListBySchoolIdAsync(this IClasses operations, int schoolId, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetClassListBySchoolIdWithHttpMessagesAsync(schoolId, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 根据学校及年级获取年级下所有班级
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// 学校ID
            /// </param>
            /// <param name='grade'>
            /// 年级ID
            /// </param>
            /// <param name='sign'>
            /// 签名
            /// </param>
            public static ResponseEntityListApiClassInfo GetClassListByGrade(this IClasses operations, int schoolId, int grade, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IClasses)s).GetClassListByGradeAsync(schoolId, grade, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 根据学校及年级获取年级下所有班级
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// 学校ID
            /// </param>
            /// <param name='grade'>
            /// 年级ID
            /// </param>
            /// <param name='sign'>
            /// 签名
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityListApiClassInfo> GetClassListByGradeAsync(this IClasses operations, int schoolId, int grade, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetClassListByGradeWithHttpMessagesAsync(schoolId, grade, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 根据班级id获取班级信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='classId'>
            /// 班级id
            /// </param>
            /// <param name='sign'>
            /// </param>
            public static ResponseEntityClassInfo GetSchoolClassById(this IClasses operations, int classId, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IClasses)s).GetSchoolClassByIdAsync(classId, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 根据班级id获取班级信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='classId'>
            /// 班级id
            /// </param>
            /// <param name='sign'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityClassInfo> GetSchoolClassByIdAsync(this IClasses operations, int classId, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSchoolClassByIdWithHttpMessagesAsync(classId, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 根据学校id和用户id获取班级信息和相应的任教信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// 学校Id
            /// </param>
            /// <param name='userId'>
            /// 教师Id
            /// </param>
            /// <param name='sign'>
            /// </param>
            public static ResponseEntityListDtoTeachingData GetUserClassList(this IClasses operations, int schoolId, int userId, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IClasses)s).GetUserClassListAsync(schoolId, userId, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 根据学校id和用户id获取班级信息和相应的任教信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// 学校Id
            /// </param>
            /// <param name='userId'>
            /// 教师Id
            /// </param>
            /// <param name='sign'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityListDtoTeachingData> GetUserClassListAsync(this IClasses operations, int schoolId, int userId, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetUserClassListWithHttpMessagesAsync(schoolId, userId, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 根据学校id和用户id获取班级信息和相应的任教信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// 学校Id
            /// </param>
            /// <param name='userId'>
            /// 教师Id
            /// </param>
            /// <param name='sign'>
            /// </param>
            public static ResponseEntityListApiBankInfo GetUserBankList(this IClasses operations, int schoolId, int userId, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IClasses)s).GetUserBankListAsync(schoolId, userId, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 根据学校id和用户id获取班级信息和相应的任教信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// 学校Id
            /// </param>
            /// <param name='userId'>
            /// 教师Id
            /// </param>
            /// <param name='sign'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityListApiBankInfo> GetUserBankListAsync(this IClasses operations, int schoolId, int userId, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetUserBankListWithHttpMessagesAsync(schoolId, userId, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 获取学校每个班级人数
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// 学校ID
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            public static ResponseEntityListClassInfo GetClassStudentCount(this IClasses operations, int schoolId, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IClasses)s).GetClassStudentCountAsync(schoolId, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 获取学校每个班级人数
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// 学校ID
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityListClassInfo> GetClassStudentCountAsync(this IClasses operations, int schoolId, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetClassStudentCountWithHttpMessagesAsync(schoolId, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
