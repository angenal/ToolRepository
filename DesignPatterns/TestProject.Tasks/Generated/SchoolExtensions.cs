// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace UserServiceClient
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for School.
    /// </summary>
    public static partial class SchoolExtensions
    {
            /// <summary>
            /// 根据学校ID获取学校Name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// 学校ID
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            public static ResponseEntityTSchool GetSchoolName(this ISchool operations, int schoolId, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ISchool)s).GetSchoolNameAsync(schoolId, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 根据学校ID获取学校Name
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// 学校ID
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityTSchool> GetSchoolNameAsync(this ISchool operations, int schoolId, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSchoolNameWithHttpMessagesAsync(schoolId, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 获取所有年级信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            public static PageResponseEntityListTGrade GetGrades(this ISchool operations, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ISchool)s).GetGradesAsync(sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 获取所有年级信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PageResponseEntityListTGrade> GetGradesAsync(this ISchool operations, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetGradesWithHttpMessagesAsync(sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// 获取所有科目信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            public static PageResponseEntityListTSubject GetSubjects(this ISchool operations, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ISchool)s).GetSubjectsAsync(sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// 获取所有科目信息
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sign'>
            /// 参数签名
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PageResponseEntityListTSubject> GetSubjectsAsync(this ISchool operations, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSubjectsWithHttpMessagesAsync(sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='sign'>
            /// </param>
            public static ResponseEntityListTGrade GetGradesBySchool(this ISchool operations, int schoolId, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ISchool)s).GetGradesBySchoolAsync(schoolId, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolId'>
            /// </param>
            /// <param name='sign'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityListTGrade> GetGradesBySchoolAsync(this ISchool operations, int schoolId, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetGradesBySchoolWithHttpMessagesAsync(schoolId, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productID'>
            /// </param>
            /// <param name='sign'>
            /// </param>
            public static ResponseEntityListTSchool GetSchoolListByProductID(this ISchool operations, int productID, string sign)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ISchool)s).GetSchoolListByProductIDAsync(productID, sign), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='productID'>
            /// </param>
            /// <param name='sign'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ResponseEntityListTSchool> GetSchoolListByProductIDAsync(this ISchool operations, int productID, string sign, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSchoolListByProductIDWithHttpMessagesAsync(productID, sign, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
